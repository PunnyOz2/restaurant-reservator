@startuml Change Password (PUT)
title "Change Password (PUT)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:auth" as authRouter
participant "<<controller>>\n:auth" as authController
participant "<<middleware>>\n:auth" as authMiddleware
participant "<<service>>\n:jwt" as jwtService
participant "<<model>>\n:User" as userModel
database "<<MongoDB>>\n:users" as users

client -> server ++:req.post('/auth/changepassword')
server -> authRouter ++:app.use('/auth', authRouter)

authRouter -> authMiddleware ++:protect()
authMiddleware -> jwtService ++:verify(token)
jwtService --> authMiddleware --:decoded
authMiddleware -> userModel ++:findById(decoded.id)
userModel -> users ++:UserSchema
users --> userModel --:user
userModel --> authMiddleware --:user
authMiddleware -> authRouter --:next()

authRouter -> authController ++:changePassword()
authController -> userModel ++:findOneById(req.user.id).select('+password')
userModel -> users ++:UserSchema
users --> userModel --:user
userModel --> authController --:user
authController -> userModel ++:matchPassword(req.body.currentPassword)
userModel --> authController --:isMatch
authController -> userModel ++:save()
userModel -> users ++:UserSchema
users --> userModel --:user
userModel --> authController --:user
' sendTokenResponse
authController -> authController ++:sendTokenResponse(user, 200, res)
authController -> userModel ++:getSignedJwtToken()
userModel --> authController --:token
authController --> client --:response

@startuml Delete Reservation (DELETE)

' header Sameple VacQ Sequence Diagram
' footer Page %page% of %lastpage%
title "Delete Reservation (DELETE)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:reservations" as reservationsRouter
participant "<<middleware>>\n:auth" as authMiddleware
participant "<<service>>\n:jwt" as jwtService
participant "<<model>>\n:User" as userModel
database "<<MongoDB>>\n:users" as users
participant "<<controllers>>\n:reservations" as reservationsController
participant "<<model>>\n:Reservation" as reservationModel
database "<<MongoDB>>\n:reservations" as ReservationsDatabase


client->server ++:req.delete('/reservations/:id')
server->reservationsRouter ++:app.use('/reservations',reservationsRouter)

reservationsRouter -> authMiddleware ++:protect()
authMiddleware -> jwtService ++:verify(token)
jwtService --> authMiddleware --:decoded
authMiddleware -> userModel ++:findById(decoded.id)
userModel -> users ++:UserSchema
users --> userModel --:user
userModel --> authMiddleware --:user
authMiddleware -> reservationsRouter --:next()

reservationsRouter -> authMiddleware ++:authorize('admin','user')
authMiddleware -> reservationsRouter --:next()

reservationsRouter -> reservationsController ++:deleteReservation()
reservationsController->reservationModel ++:findById(req.params.id)
reservationModel ->ReservationsDatabase ++: ReservationSchema
ReservationsDatabase --> reservationModel --: restaurant
reservationsController <-- reservationModel --:restaurant
reservationsController->reservationModel ++:deleteOne()
reservationModel ->ReservationsDatabase ++: ReservationSchema
ReservationsDatabase --> reservationModel --: response
reservationsController <-- reservationModel --:response
reservationsController-->client --:response

@enduml
